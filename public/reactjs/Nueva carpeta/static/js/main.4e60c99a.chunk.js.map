{"version":3,"sources":["assets/images/logo_edrans.png","components/header.js","components/caller.js","components/weather/detail.js","components/weather/finder.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HeaderApp","react_default","a","createElement","className","src","logo","alt","Component","ApiCaller","this","get","url","callback","callback_error","fetch","method","headers","Accept","Content-Type","then","response","json","catch","console","log","WeatherDetail","hidden","props","loading","List","size","Item","location","temp_c","humidity","condition","Loader","active","inline","WeatherFinder","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","_ref","name","value","setState","defineProperty","handleSubmit","_this$state","state","city","country","res","current","text","error","_this$state2","Form","onSubmit","widths","Group","Field","Input","fluid","placeholder","onChange","align","Button","content","secondary","detail","MainApp","finder","App","header","components_main","Boolean","window","hostname","match","ReactDOM","render","src_App","class","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e60c99a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_edrans.5758b2fc.png\";","import React, { Component } from 'react';\r\nimport logo from '../assets/images/logo_edrans.png';\r\n\r\nclass HeaderApp extends Component {\r\n  render() {\r\n    return (\r\n          <header className=\"six wide column center aligned middle aligned grid\">\r\n            <img className=\"ui fluid\" src={logo}  alt=\"logo\" />\r\n            <h1 className=\"ui icon header\">\r\n                Weather Finder\r\n                <div className=\"sub header\">Find out the temperature, weather conditions and more.</div>\r\n            </h1>  \r\n          </header>\r\n  );\r\n  }\r\n}\r\n \r\nexport default HeaderApp;","\r\nexport var ApiCaller = function () {\r\n    this.get = function (url,callback,callback_error) {\r\n        fetch(url, {\r\n            method: 'get',\r\n            headers: {  'Accept': 'application/json',\r\n                        'Content-Type': 'application/json',}})\r\n        .then((response) => response.json())\r\n        .then(callback).catch(callback_error);\r\n\r\n        /*this.caller.get(this.makeUrl(route), params)\r\n            .then(callback, this.error)*/\r\n            console.log(\"params\")\r\n    }\r\n    \r\n};","import React, { Component } from 'react'; \r\nimport {List,Loader} from 'semantic-ui-react'\r\n\r\nclass WeatherDetail extends Component {\r\n    render() {\r\n      return (\r\n        <div>\r\n             <div  hidden={this.props.loading==null || this.props.loading}>\r\n                <List size=\"huge\">\r\n                    <List.Item><b>Location:</b>  {this.props.location}</List.Item>\r\n                    <List.Item><b>Temp_c:</b>  {this.props.temp_c}</List.Item>\r\n                    <List.Item><b>Humidity:</b>  {this.props.humidity}</List.Item>\r\n                    <List.Item><b>Condition:</b>  {this.props.condition}</List.Item>\r\n                </List>\r\n            </div>\r\n            <Loader  active={this.props.loading} inline='centered' />\r\n        </div>\r\n      )\r\n    }\r\n}\r\nexport default WeatherDetail;","import React, { Component } from 'react'; \r\nimport {Form,Input} from 'semantic-ui-react'\r\nimport {ApiCaller} from '../caller'\r\nimport WeatherDetail  from './detail'\r\n \r\nclass WeatherFinder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { city: '', \r\n                       country: '' ,\r\n                       location:\"\",\r\n                       temp_c:\"\",\r\n                       humidity:\"\",\r\n                       condition:\"\",\r\n                       loading:null\r\n                    };\r\n    }\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\r\n    handleSubmit = () => {\r\n        const { city, country } = this.state\r\n        let checkWeather=(res) => {\r\n            this.setState({location:res.location.name,\r\n                            temp_c:res.current.temp_c,\r\n                            humidity:res.current.humidity,\r\n                            condition:res.current.condition.text,\r\n                            loading: false});\r\n        }\r\n        let callback_error=(error) => {\r\n            console.error(error);\r\n        }\r\n        this.setState({ loading: true})\r\n        // var url='http://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=bf323b133af7ff6a6c87abae9f8ee9a7'\r\n        var url=\"http://api.apixu.com/v1/current.json?key=b5d60621231c4620a4615445181612&q=\"+city+\"&country=\"+country\r\n        new ApiCaller().get(url,checkWeather,callback_error);\r\n    }\r\n    render() {\r\n      const { city, country} = this.state\r\n      return (\r\n          <div>\r\n          <Form onSubmit={this.handleSubmit}  widths='equal'>\r\n            <Form.Group>\r\n                <Form.Field>\r\n                    <Input    fluid placeholder='Insert city...' name='city'   value={city} onChange={this.handleChange}/>\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <Input    fluid placeholder='Insert country...' name='country' value={country} onChange={this.handleChange}/>\r\n                </Form.Field>\r\n                <Form.Field  align=\"right\" >\r\n                    <Form.Button   content='Search Weather'  secondary   />\r\n                </Form.Field>\r\n            </Form.Group>\r\n          </Form>\r\n          <WeatherDetail loading ={this.state.loading}\r\n                         location={this.state.location} \r\n                         temp_c={this.state.temp_c}\r\n                         humidity={this.state.humidity}\r\n                         condition={this.state.condition}></WeatherDetail>\r\n          </div>\r\n      )\r\n    }\r\n}\r\nexport default WeatherFinder;","import React, { Component } from 'react'; \r\n\r\nimport WeatherFinder from './weather/finder';\r\nclass MainApp extends Component {\r\n  render() {\r\n    return (\r\n        <main className=\"ten wide column aligned middle aligned grid\">\r\n            <div className=\"ui  middle aligned grid panel\">\r\n            <div className=\"column\" >\r\n                <WeatherFinder></WeatherFinder>\r\n            </div> \r\n            </div> \r\n        </main>\r\n  );\r\n  }\r\n}\r\nexport default MainApp;","import React, { Component } from 'react';\nimport HeaderApp from './components/header';\nimport MainApp from './components/main';\n \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"ui stackable four column grid panel\">\n        <div className=\"row\">\n          <HeaderApp></HeaderApp>\n          <MainApp></MainApp>\n        </div>\n      </div>\n  );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'semantic-ui-css/semantic.min.css'\nimport './scss/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App class=\"App\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}